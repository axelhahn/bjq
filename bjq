#!/bin/bash
# ======================================================================
#
# AXELS BASH JOB QUEUE * CLI WRAPPER
#
# ----------------------------------------------------------------------
# 2023-10-NN  v0.1  ah  first lines
# ======================================================================

_version="0.1"

SOURCE=${BASH_SOURCE[0]}
while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  JQ_DIRSELF=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$JQ_DIRSELF/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
JQ_DIRSELF=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

. "$JQ_DIRSELF/include/jobq.class.sh" || exit


# ----------------------------------------------------------------------
# FUNCTIONS
# ----------------------------------------------------------------------

function showHelp(){
  local _self; _self=$( basename $0 )
  echo "______________________________________________________________________________"
  color.echo "white" "cyan" "     "
  color.print "white" "cyan" " BJQ "; echo " Axels Bash job queue"
  color.print "white" "cyan" "_____"; echo -n "_____________________________________________________________________"
  color.invert; echo "v$_version"; color.reset
  echo

  cat << EOF
  ðŸ‘¤ Author:  Axel Hahn
  ðŸ§¾ Source:  https://github.com/axelhahn/bjq/
  ðŸ“œ License: GNU GPL 3.0
  ðŸ“— Docs:    https://www.axel-hahn.de/docs/bjq/
______________________________________________________________________________


Job queue written in Bash. Execute a list of jobs sequentially.


You can add commands that will be dropped as job files into a "pending" queue.
  bjq -a <COMMAND> [<WORKDIR>]

When starting the runner (eg. as cronjob every 5 min) it executes all pending
jobs.
  bjq -r

Running jobs are held in the "running" folder.

Finished jobs are moved to the "done" folder. Their command output is in an
extra file with extension ".ok" or ".error" depending on the exit code.
______________________________________________________________________________

SYNTAX:

  $_self -a [<COMMAND> [<WORKDIR>]]
  $_self [option]

OPTIONS:

  -a | --add  [<COMMAND> [<WORKDIR>]]
                    Add a new job command and optional a working directory.
                    Default directory is the current directory.
                    If no command is given the interactive mode will start.
  -h | --help       Show this help and exit.
  -l | --list       List current jobs.
  -r | --run        Start run to process pending jobs.
  -s | --status     Show status.
  -v | --version    Show version and exit.
______________________________________________________________________________
EOF

}

function _prompt(){
  color.print "cyan" "$1 "
  color.print "green" "> "
  color.reset
}

# ----------------------------------------------------------------------
# MAIN
# ----------------------------------------------------------------------


if [ "$#" -eq 0 ]; then
  echo "ERROR: Parameter required"
  echo "Use '$(basename $0) --help' to show more information."
  exit 1
fi

while [[ "$#" -gt 0 ]]; do case $1 in
  -h|--help)   showHelp; exit 0;;
  -a|--add)  if [ -n "$2" ]; then
            if [ -d "$3" ]; then
              jobq.add "$2" "$3"
              shift
            else
              jobq.add "$2"
            fi
            shift; shift
          else
            echo "Enter a command to execute and (optionally) a working directory."
            _prompt "  Command         "; read -r mycommand
            if [ -n "$mycommand" ]; then
              _prompt "  Path (optional) "; read -r mypath
              jobq.add "$mycommand" "$mypath"
            else
              echo
              echo "Abort. No command was given. Doing nothing."
              exit 1
            fi
          fi
          ;;
  -l|--list) jobq.list; shift;;
  -r|--run)  jobq.run; shift ;;
  -s|--status) jobq.status; shift ;;
  -v|--version) echo "$(basename $0) $_version"; exit 0;;
  *) color.echo red "ERROR: Unknown parameter: $1"; showHelp; exit 1;
esac; done

# ----------------------------------------------------------------------
